<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Routine.Client" #>

<# foreach(var model in Application.Models) { #>
	<# foreach(var mode in model.GetModes()) { #>

namespace <#= model.GetNamespace(mode) #>
{
	public class <#= model.GetName(mode) #>
	{
		private readonly <#= typeof(Robject).FullName #> robject;
		public <#= typeof(Robject).FullName #> Robject { get { return robject; } }

		public <#= model.GetName(mode) #>(<#= typeof(Robject).FullName #> robject)
		{
			this.robject = robject;
		}
		<# if(model.Initializable) { #>

		public <#= model.GetName(mode) #>(<#= string.Join(", ", model.Initializer.Parameters.Select(p => p.Model.GetFullName(mode) + " " + p.GetName(mode))) #>) { }
		<# } #>
		<# foreach(var member in model.Members) { #>

		public <#= member.ReturnModel.GetFullName(mode) #> <#= member.GetName(mode) #> { get { return default(<#= member.ReturnModel.GetFullName(mode) #>); } }
		<# } #>
		<# foreach(var operation in model.Operations) { #>

		public <#= operation.ReturnModel.GetFullName(mode) #> <#= operation.GetName(mode) #>(<#= string.Join(", ", operation.Parameters.Select(p => p.Model.GetFullName(mode) + " " + p.GetName(mode))) #>) 
		{
			var <#= operation.GetName(mode) #>_result = Robject.Perform
				(
				"<#= operation.Id #>"
			<# foreach(var parameter in operation.Parameters) { #>

				, <#= parameter.Model.RenderObjectToRvariable(mode, parameter.Id, parameter.GetName(mode), "robject.Application") #>
			<# } #>
				
				)
			;
			<# if(!operation.ReturnModel.IsVoid) { #>

			return <#= operation.ReturnModel.RenderRvariableToObject(mode, operation.GetName(mode) + "_result", "robject.Application") #>;
			<# } #>

		}
		<# } #>

		public override string ToString()
		{
			return robject.Id;
		}
	}
}
	<# } #>
<# } #>
<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ import namespace="Routine.Client" #>

using System.Linq;

<# foreach(var assemblyName in Application.FriendlyAssemblyNames) { #>
[assembly:<#= Type<InternalsVisibleToAttribute>() #>("<#= assemblyName #>")]
<# } #>


<# if(Application.ApiExists) { #>

namespace <#= Application.DefaultNamespace #>
{
	public class <#= Application.ApiName #>
	{
		private readonly <#= Type<Rapplication>() #> rapplication;

		public <#= Application.ApiName #>(<#= Type<Rapplication>() #> rapplication)
		{
			this.rapplication = rapplication;
		}

	<# foreach(var model in Application.Models) { #>
		<# var staticInstanceIds = model.StaticInstanceIds; #>
		<# foreach(var staticInstanceId in staticInstanceIds) { #>
			<# if(model.Members.Count > 0) { #>
		
		public <#= model.FullName #> Get<#= model.Name #><#= staticInstanceIds.Count > 1 ? staticInstanceId.ToUpperInitial() : "" #>()
		{
			return new <#= model.FullName #>(rapplication.Get("<#= staticInstanceId #>", "<#= model.Id #>"));
		}

			<# } else { #>
			
		public <#= model.FullName #> <#= model.Name #><#= staticInstanceIds.Count > 1 ? staticInstanceId.ToUpperInitial() : "" #>
		{
			get { return new <#= model.FullName #>(rapplication.Get("<#= staticInstanceId #>", "<#= model.Id #>")); }
		}

			<# } #>
		<# } #>

		<# if(model.CanInitialize) { #>
			<# foreach(var group in model.Initializer.Groups) { #>

			public <#= model.FullName #> New<#= model.Name #>
				(<#= string.Join(", ", group.Select(p => p.Model.FullName + " " + p.Id)) #>)
			{
				return new <#= model.FullName #>(rapplication, <#= string.Join(", ", group.Select(p => p.Id)) #>);
			}

			<# } #>
		<# } #>
	<# } #>
	}
}

<# } #>

<# foreach(var model in Application.Models) { #>

namespace <#= model.Namespace #>
{
	public class <#= model.Name #>
	{
		<#= AccessModifier #> <#= Type<Robject>() #> Robject { get; private set; }
		<#= AccessModifier #> <#= model.Name #>(<#= Type<Robject>() #> robject)
		{
			Robject = robject;
		}

	<# if(model.CanInitialize) { #>
		<# foreach(var group in model.Initializer.Groups) { #>

		<#= AccessModifier #> <#= model.Name #>
			(<#= Type<Rapplication>() #> rapplication, <#= string.Join(", ", group.Select(p => p.Model.FullName + " " + p.Id)) #>)
		{
			Robject = rapplication
				.Init("<#= model.Id #>"
			<# foreach(var parameter in group) { #>
					, <# ModelToRvariable(parameter, "rapplication"); #>
			<# } #>
				);
		}

		<# } #>
	<# } #>

	<# foreach(var member in model.Members) { #>
		public <#= member.ReturnModel.FullName #> <#= member.Id #>
		{
			get
			{
				return Robject["<#= member.Id #>"].Get().<# RobjectToModel(member.ReturnModel); #>;
			}
		}
	<# } #>

	<# foreach(var operation in model.Operations) { #>
		<# foreach(var group in operation.Groups) { #>

		public <#= operation.ReturnModel.FullName #> <#= operation.Id #>
			(<#= string.Join(", ", group.Select(p => p.Model.FullName + " " + p.Id)) #>)
		{
			var <#= operation.Id #>_result = Robject.Perform
				(
				"<#= operation.Id #>"
			<# foreach(var parameter in group) { #>
				, <# ModelToRvariable(parameter); #>
			<# } #>
				)
			;
			
			<# if(!operation.ReturnModel.IsVoid) { #>
			return <#= operation.Id #>_result.<# RobjectToModel(operation.ReturnModel); #>;
			<# } #>
		}

		<# } #>
	<# } #>

		public void Invalidate()
		{
			Robject.Invalidate();
		}
		
		public override string ToString() { return ToString(false); }
		public string ToString(bool includeDebugInfo)
		{
			if(!includeDebugInfo) { return Robject.Value; }
		
			return string.Format("[Id: {0}, Value: {1}]", Robject.Id, ToString());
		}

		public override bool Equals(object obj)
		{
			if(obj == null)
				return false;
			if(ReferenceEquals(this, obj))
				return true;
			if(obj.GetType() != typeof(<#= model.FullName #>))
				return false;

			var other = (<#= model.FullName #>)obj;
			
			return Robject.Equals(other.Robject);
		}
		
		public override int GetHashCode()
		{
			return Robject.GetHashCode();
		}
	}
}

<# } #>

<#+ 

protected string Type<T>() { return typeof(T).FullName; }
protected string AccessModifier { get { return Application.ApiExists ? "internal" : "public"; } } 

protected void RobjectToModel(ObjectCodeModel model)
{ 
	if(model.IsList) { #>

		AsList(robj =>

		<#+ if(model.IsValueModel) { #>

			<#= model.GetStringToValueCode("robj") #>

		<#+ } else { #>

			new <#= model.FullNameIgnoringList #>(robj)

		<#+ } #>

		)

	<#+ } else { #>

		As(robj =>

		<#+ if(model.IsValueModel) { #>

			<#= model.GetStringToValueCode("robj") #>

		<#+ } else { #>

			new <#= model.FullNameIgnoringList #>(robj)

		<#+ } #>

		)

	<#+ } #>

<#+

}

protected void ModelToRvariable(ParameterCodeModel parameter) { ModelToRvariable(parameter, "Robject.Application"); }
protected void ModelToRvariable(ParameterCodeModel parameter, string rapplicationVar)
{ 
	var model = parameter.Model; 
	
	if(model.IsList) { #>
		<#+ if(model.IsValueModel) { #>

			<#= rapplicationVar #>.NewVarList("<#= parameter.Id #>", <#= parameter.Id #>, o => <#= model.GetValueToStringCode("o") #>, "<#= model.Id #>")

		<#+ } else { #>

			<#= rapplicationVar #>.NewVarList("<#= parameter.Id #>", <#= parameter.Id #>.Select(o => o.Robject))

		<#+ } #>
	<#+ } else { #>
		<#+ if(model.IsValueModel) { #>

			<#= rapplicationVar #>.NewVar("<#= parameter.Id #>", <#= parameter.Id #>, o => <#= model.GetValueToStringCode("o") #>, "<#= model.Id #>")

		<#+ } else { #>

			<#= rapplicationVar #>.NewVar("<#= parameter.Id #>", <#= parameter.Id #>.Robject)

		<#+ } #>
	<#+ } #>
<#+

}

#>
